{"ast":null,"code":"var _jsxFileName = \"/Users/nadiia/Documents/GitHub/goit-react-hw-03-phonebook/src/components/ContactForm/ContactForm.jsx\";\nimport React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport propTypes from 'prop-types';\nimport { MainForm, AddButton, FormLabel, Input } from './ContactForm.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ContactForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleSubmit = (_ref, _ref2) => {\n      let {\n        name,\n        number\n      } = _ref;\n      let {\n        resetForm\n      } = _ref2;\n      const nameInContacts = this.props.contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n      if (nameInContacts) {\n        alert(`${name} is already in contacts`);\n        return;\n      }\n\n      const contact = {\n        id: nanoid(),\n        name,\n        number\n      };\n      this.props.onSubmit(contact);\n      resetForm();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: '',\n        number: ''\n      },\n      onSubmit: this.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(MainForm, {\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"name\",\n              pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n              title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"number\",\n            children: \"Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"tel\",\n              name: \"number\",\n              pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n              title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddButton, {\n          type: \"submit\",\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nContactForm.propTypes = {\n  onSubmit: propTypes.func.isRequired,\n  contacts: propTypes.arrayOf(propTypes.object).isRequired\n};","map":{"version":3,"sources":["/Users/nadiia/Documents/GitHub/goit-react-hw-03-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["React","Component","Formik","nanoid","propTypes","MainForm","AddButton","FormLabel","Input","ContactForm","handleSubmit","name","number","resetForm","nameInContacts","props","contacts","find","contact","toLowerCase","alert","id","onSubmit","render","func","isRequired","arrayOf","object"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,KAAzC,QAAsD,sBAAtD;;AAEA,OAAO,MAAMC,WAAN,SAA0BR,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SACzCS,YADyC,GAC1B,iBAAqC;AAAA,UAApC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAoC;AAAA,UAAlB;AAAEC,QAAAA;AAAF,OAAkB;AAClD,YAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CACrBC,OAAO,IAAIA,OAAO,CAACP,IAAR,CAAaQ,WAAb,OAA+BR,IAAI,CAACQ,WAAL,EADrB,CAAvB;;AAGA,UAAIL,cAAJ,EAAoB;AAClBM,QAAAA,KAAK,CAAE,GAAET,IAAK,yBAAT,CAAL;AACA;AACD;;AACD,YAAMO,OAAO,GAAG;AAAEG,QAAAA,EAAE,EAAElB,MAAM,EAAZ;AAAgBQ,QAAAA,IAAhB;AAAsBC,QAAAA;AAAtB,OAAhB;AACA,WAAKG,KAAL,CAAWO,QAAX,CAAoBJ,OAApB;AACAL,MAAAA,SAAS;AACV,KAZwC;AAAA;;AAczCU,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEZ,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,MAAM,EAAE;AAApB,OADjB;AAEE,MAAA,QAAQ,EAAE,KAAKF,YAFjB;AAAA,6BAIE,QAAC,QAAD;AAAU,QAAA,YAAY,EAAC,KAAvB;AAAA,gCACE;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,mCACE,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,IAAI,EAAC,MAFP;AAGE,cAAA,OAAO,EAAC,wHAHV;AAIE,cAAA,KAAK,EAAC,wIAJR;AAKE,cAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,mCACE,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,KADP;AAEE,cAAA,IAAI,EAAC,QAFP;AAGE,cAAA,OAAO,EAAC,wFAHV;AAIE,cAAA,KAAK,EAAC,8FAJR;AAKE,cAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAyBE,QAAC,SAAD;AAAW,UAAA,IAAI,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YADF;AAkCD;;AAjDwC;AAoD3CD,WAAW,CAACL,SAAZ,GAAwB;AACtBkB,EAAAA,QAAQ,EAAElB,SAAS,CAACoB,IAAV,CAAeC,UADH;AAEtBT,EAAAA,QAAQ,EAAEZ,SAAS,CAACsB,OAAV,CAAkBtB,SAAS,CAACuB,MAA5B,EAAoCF;AAFxB,CAAxB","sourcesContent":["import React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport propTypes from 'prop-types';\nimport { MainForm, AddButton, FormLabel, Input } from './ContactForm.styled';\n\nexport class ContactForm extends Component {\n  handleSubmit = ({ name, number }, { resetForm }) => {\n    const nameInContacts = this.props.contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (nameInContacts) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contact = { id: nanoid(), name, number };\n    this.props.onSubmit(contact);\n    resetForm();\n  };\n\n  render() {\n    return (\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        onSubmit={this.handleSubmit}\n      >\n        <MainForm autoComplete=\"off\">\n          <div>\n            <FormLabel htmlFor=\"name\">Name</FormLabel>\n            <div>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n            </div>\n          </div>\n          <div>\n            <FormLabel htmlFor=\"number\">Number</FormLabel>\n            <div>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n            </div>\n          </div>\n          <AddButton type=\"submit\">Add contact</AddButton>\n        </MainForm>\n      </Formik>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: propTypes.func.isRequired,\n  contacts: propTypes.arrayOf(propTypes.object).isRequired,\n};"]},"metadata":{},"sourceType":"module"}